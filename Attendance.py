import cv2import numpy as npimport face_recognitionimport osimport csvfrom datetime import datetimefrom gpiozero import Buttonimport RPi.GPIO as GPIOfrom RPLCD import *from time import sleepimport pyautoguiimport timefrom RPLCD.i2c import CharLCDfrom pydrive.auth import GoogleAuthfrom pydrive.drive import GoogleDrive gauth = GoogleAuth()drive = GoogleDrive(gauth)fileList = []lcd = CharLCD('PCF8574', 0x27)#define push-buttonsbutton1 = Button(17)button2 = Button(27)button3 = Button(22)button4 = Button(10)#set GPIO pins to be connected#Column pinsC1 = 20C2 = 16C3 = 12C4 = 1#Row pinsL1 = 23L2 = 24L3 = 25 L4 = 8L5 = 7#Initialize the GPIO pinsGPIO.setwarnings(False)GPIO.setmode(GPIO.BCM)GPIO.setup(L1, GPIO.OUT)GPIO.setup(L2, GPIO.OUT)GPIO.setup(L3, GPIO.OUT)GPIO.setup(L4, GPIO.OUT)GPIO.setup(L5, GPIO.OUT)#Configure input pins to use internal pull-down resistorsGPIO.setup(C1, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)GPIO.setup(C2, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)GPIO.setup(C3, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)GPIO.setup(C4, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)#-----Passcode------#test1 = NonekeyStorePass = NonepasscodeStore = []def readLinePass(line, characters):    GPIO.output(line, GPIO.HIGH)    if(GPIO.input(C1) == 1):        keyStorePass = characters[0]        passcodeStore.append(keyStorePass)        lcd.cursor_pos = (0, 10)        lcd.write_string(''.join([str(item) for item in passcodeStore]))        print(passcodeStore)        while (GPIO.input(C1) == 1):            test1 = GPIO.input(C1)                if(GPIO.input(C2) == 1):        keyStorePass = characters[1]        passcodeStore.append(keyStorePass)        lcd.cursor_pos = (0, 10)        lcd.write_string(''.join([str(item) for item in passcodeStore]))        print(passcodeStore)        while (GPIO.input(C2) == 1):            test1 = GPIO.input(C2)                if(GPIO.input(C3) == 1):        keyStorePass = characters[2]        passcodeStore.append(keyStorePass)        lcd.cursor_pos = (0, 10)        lcd.write_string(''.join([str(item) for item in passcodeStore]))        print(passcodeStore)        while (GPIO.input(C3) == 1):            test1 = GPIO.input(C3)                if(GPIO.input(C4) == 1):        keyStorePass = characters[3]        passcodeStore.append(keyStorePass)        lcd.cursor_pos = (0, 10)        lcd.write_string(''.join([str(item) for item in passcodeStore]))        print(passcodeStore)        while (GPIO.input(C4) == 1):            test1 = GPIO.input(C4)    GPIO.output(line, GPIO.LOW)#---------Year--------#test2 = NonekeyStoreYear = Noneyear = []def readLineYear(line, characters):    GPIO.output(line, GPIO.HIGH)                if(GPIO.input(C2) == 1):        keyStoreYear = characters[1]        year.clear()        year.append(keyStoreYear)        lcd.cursor_pos = (1, 0)        lcd.write_string('Year: 5')        print(year)        while (GPIO.input(C2) == 1):            test2 = GPIO.input(C2)                if(GPIO.input(C4) == 1):        keyStoreYear = characters[3]        year.append(keyStoreYear)        while (GPIO.input(C4) == 1):            test2 = GPIO.input(C4)                GPIO.output(line, GPIO.LOW)#-----------Semester---------#test3 = NonekeyStoreSem = Nonesem = []def readLineSem(line, characters):    GPIO.output(line, GPIO.HIGH)        if(GPIO.input(C1) == 1):        keyStoreSem = characters[0]        sem.clear()        sem.append(keyStoreSem)        lcd.cursor_pos = (2, 0)        lcd.write_string('Semester (1/2): 1')        print(sem)        while (GPIO.input(C1) == 1):            test3 = GPIO.input(C1)                if(GPIO.input(C2) == 1):        keyStoreSem = characters[1]        sem.clear()        sem.append(keyStoreSem)        lcd.cursor_pos = (2, 0)        lcd.write_string('Semester (1/2): 2')        print(sem)        while (GPIO.input(C2) == 1):            test3 = GPIO.input(C2)                if(GPIO.input(C4) == 1):        keyStoreSem = characters[3]        sem.append(keyStoreSem)        while (GPIO.input(C4) == 1):            test3 = GPIO.input(C4)                GPIO.output(line, GPIO.LOW)   #--------------Course---------------#test4 = NonekeyStoreCourse = Nonecourse = []def readLineCourse(line, characters):    GPIO.output(line, GPIO.HIGH)        if(GPIO.input(C1) == 1):        keyStoreCourse = characters[0]        course.clear()        course.append(keyStoreCourse)        lcd.cursor_pos = (0, 16)        lcd.write_string(''.join([str(item) for item in course]))        print(course)        while (GPIO.input(C1) == 1):            test4 = GPIO.input(C1)                if(GPIO.input(C2) == 1):        keyStoreCourse = characters[1]        course.clear()        course.append(keyStoreCourse)        lcd.cursor_pos = (0, 16)        lcd.write_string(''.join([str(item) for item in course]))        print(course)        while (GPIO.input(C2) == 1):            test4 = GPIO.input(C2)                if(GPIO.input(C3) == 1):        keyStoreCourse = characters[2]        course.clear()        course.append(keyStoreCourse)        lcd.cursor_pos = (0, 16)        lcd.write_string(''.join([str(item) for item in course]))        print(course)        while (GPIO.input(C3) == 1):            test4 = GPIO.input(C3)                if(GPIO.input(C4) == 1):        keyStoreCourse = characters[3]        course.append(keyStoreCourse)        lcd.cursor_pos = (0, 16)        lcd.write_string(''.join([str(item) for item in course]))        while (GPIO.input(C4) == 1):            test4 = GPIO.input(C4)                GPIO.output(line, GPIO.LOW)       path = 'faces'images = []classNames = []myList = os.listdir(path)now = datetime.now()d = datetime(1, 1, 1).now()am_pm = 'am' if d.hour<12 else 'pm'dtString = d.strftime('{}:{}:{}'.format(d.hour%12,d.minute, am_pm))dString = now.strftime('%d:%m:%Y')date = dStringfor cl in myList:    curImg = cv2.imread(f'{path}/{cl}')    images.append(curImg)    classNames.append(os.path.splitext(cl)[0])def findEncodings(images):    encodeList = []    for img in images:        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)        encode = face_recognition.face_encodings(img)[0]        encodeList.append(encode)    return encodeList#---------Exam attendance function----------------#def markExam(name):    pathE = 'exam'    with open(f"{pathE}/{course}",'r+') as f:        myDataList = f.readlines()        nameList = []        for line in myDataList:            entry = line.split(',')            nameList.append(entry[0])        if name not in nameList:            now = datetime.now()            d = datetime(1, 1, 1).now()            am_pm = 'am' if d.hour<12 else 'pm'            dtString = d.strftime('{}:{}:{}'.format(d.hour%12,d.minute, am_pm))            dString = now.strftime('%d:%m:%Y')            f.writelines(f'\n{name},{dString},{dtString}')lcd.cursor_pos = (1, 0)lcd.write_string('   Processing...')print('Processing')encodeListKnown = findEncodings(images)lcd.close(clear=True)lcd.cursor_pos = (1, 0)lcd.write_string('   Done Processing')sleep(3)lcd.close(clear=True)print('Done Processing\n')#print('Encoding Complete\n')lcd.cursor_pos = (0, 0)lcd.write_string('Button1 for Class')lcd.crlf()lcd.cursor_pos = (1, 0)lcd.write_string('Button2 for Exam')lcd.crlf()lcd.cursor_pos = (2, 0)lcd.write_string('Button3 to Stop\n')lcd.crlf()print("Button 1 for class")print("Button 2 for exam")print("Button 3 to stop\n")#print("Button 4 to update to cloud")cap = cv2.VideoCapture(0)while True:    if (button1.is_pressed):        passcodeStore.clear()                lcd.close(clear=True)        lcd.cursor_pos = (0, 0)        lcd.write_string('Passcode: ')                print('Passcode: ')        try:            while True:                # call the readLine function for each row of the keypad                readLinePass(L1, ["F1","F2","#","*"])                readLinePass(L2, ["1","2","3","UP"])                readLinePass(L3, ["4","5","6","DOWN"])                readLinePass(L4, ["7","8","9","ESC"])                readLinePass(L5, ["LEFT","0","RIGHT"])                time.sleep(0.1)         except:            if passcodeStore != ['1','2','3','4']:                print("Incorrect")                lcd.cursor_pos = (1, 0)                lcd.write_string('Invalid passcode')                lcd.cursor_pos = (3, 0)                lcd.write_string('Button1 for Class')                continue                            else:                lcd.cursor_pos = (1, 0)                lcd.write_string('Year: ')                print('\nYear: ')                lcd.cursor_pos = (3, 0)                lcd.write_string('Only Year 5 valid')                                try:                    while True:                        # call the readLine function for each row of the keypad                        readLineYear(L3, ["4","5","6","DOWN"])                        readLineYear(L5, ["LEFT","0","RIGHT"])                        time.sleep(0.1)                 except:                    #Assign input to files                    if year != ['5']:                        lcd.cursor_pos = (1, 0)                        lcd.write_string('Invalid Year')                        lcd.cursor_pos = (3, 0)                        lcd.write_string('Button1 for Class')                        continue                                        else:                        lcd.cursor_pos = (2, 0)                        lcd.write_string('Semester (1/2): ')                        lcd.cursor_pos = (3, 0)                        lcd.write_string('                 ')                        print('\nSemester (1/2): ')                                        try:                            while True:                                readLineSem(L2, ["1","2","3","UP"])                                readLineSem(L5, ["LEFT","0","RIGHT"])#,"ENT"])                                time.sleep(0.1)                         except:                            #First sem courses                            if sem == ['1']:                                lcd.close(clear=True)                                lcd.cursor_pos = (0, 0)                                lcd.write_string(' Select Course:')                                print("Select Course")                                                                lcd.cursor_pos = (2, 0)                                lcd.write_string('1_ECE501   2_ECE502')                                lcd.cursor_pos = (3, 0)                                lcd.write_string('3_ECE503   4_ECE504')                                                                try:                                    while True:                                        # call the readLine function for each row of the keypad                                        readLineCourse(L2, ["1","2","3","UP"])                                        readLineCourse(L3, ["4","5","6","DOWN"])                                        readLineCourse(L4, ["7","8","9","ESC"])                                        readLineCourse(L5, ["LEFT","0","RIGHT"])#,"ENT"])                                        time.sleep(0.1)                                 except:                                    #Assign input to files                                    if course == ['1']:                                        course = "ECE501.1" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE501.1')                                        print(course)                                    elif course == ['2']:                                        course = "ECE502.1" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE502.1')                                        print(course)                                    elif course == ['3']:                                        course = "ECE503.1" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE503.1')                                        print(course)                                    elif course == ['4']:                                        course = "ECE504.1" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE504.1')                                        print(course)                                                                    elif sem == ['2']:                                #Second sem courses                                lcd.close(clear=True)                                lcd.cursor_pos = (0, 0)                                lcd.write_string(' Select Course:')                                print("Select Course")                                                                lcd.cursor_pos = (2, 0)                                lcd.write_string('1_ECE505   2_ECE506')                                                     lcd.cursor_pos = (3, 0)                                lcd.write_string('3_ECE507   4_ECE508')                                                                try:                                    while True:                                        # call the readLine function for each row of the keypad                                        readLineCourse(L2, ["1","2","3","UP"])                                        readLineCourse(L3, ["4","5","6","DOWN"])                                        readLineCourse(L4, ["7","8","9","ESC"])                                        readLineCourse(L5, ["LEFT","0","RIGHT"])#,"ENT"])                                        time.sleep(0.1)                                 except:                                    #Assign input to files                                    if course == ['1']:                                        course = "ECE505.2" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE505.2')                                        print(course)                                    elif course == ['2']:                                        course = "ECE506.2" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE506.2')                                        print(course)                                    elif course == ['3']:                                        course = "ECE507.2" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE507.2')                                        print(course)                                    elif course == ['4']:                                        course = "ECE508.2" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Class: ECE508.2')                                        print(course)                                                             # #------------------- Capture faces for Class Attendane ------------------------------#        while True:            success, img = cap.read()            imgS = cv2.resize(img,(0,0),None,0.25,0.25)            imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)            facesCurFrame = face_recognition.face_locations(imgS)            encodesCurFrame = face_recognition.face_encodings(imgS,facesCurFrame)            for encodeFace,faceLoc in zip(encodesCurFrame,facesCurFrame):                matches = face_recognition.compare_faces(encodeListKnown,encodeFace)                faceDis = face_recognition.face_distance(encodeListKnown,encodeFace)                matchIndex = np.argmin(faceDis)                if matches[matchIndex]:                    name = classNames[matchIndex].upper()                    newName = name.replace("_", "/")                    y1,x2,y2,x1 = faceLoc                    y1, x2, y2, x1 = y1*4,x2*4,y2*4,x1*4                    cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),2)                    cv2.rectangle(img,(x1,y2-35),(x2,y2),(0,255,0),cv2.FILLED)                    cv2.putText(img,newName,(x1+6,y2-6),cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2)                                        #Mark Attendance                    pathC = 'class'                    with open(f"{pathC}/{course}",'r+') as f:                        myDataList = f.readlines()                        #print(myDataList)                        nameList = []                        dateList = []                        lineList = []                        for line in myDataList:                            entry = line.split(',')                            nameList.append(entry[0])                            dateList.append(entry[-1])                            lineList.append(entry[:3])                            print(nameList)                            #print(dateList)                                                    if newName not in nameList:                            now = datetime.now()                            d = datetime(1, 1, 1).now()                            dString = now.strftime('%d:%m:%Y')                            f.writelines(f'\n{newName},{dtString},{dString}')                        elif date not in dateList:                            now = datetime.now()                            d = datetime(1, 1, 1).now()                            dString = now.strftime('%d:%m:%Y')                            f.writelines(f'\n\n{newName},{dtString},{dString}')                        elif newName != nameList[-1] and date == dateList[-1]:                            now = datetime.now()                            d = datetime(1, 1, 1).now()                            dString = now.strftime('%d:%m:%Y')                            f.writelines(f'\n{newName},{dtString},{dString}')                        elif newName not in lineList and date not in lineList:                            now = datetime.now()                            d = datetime(1, 1, 1).now()                            dString = now.strftime('%d:%m:%Y')                            f.writelines(f'\n{newName},{dtString},{dString}')            cv2.imshow('Output',img)            cv2.waitKey(1)                        if (button3.is_pressed):                cap.release()                cv2.destroyAllWindows()                break            #else:                #continue            #break        #else:            #continue        #break    # #------------------- Capture faces for Exam Attendane ------------------------------#    #INPUT = input("Button: ")    elif (button2.is_pressed):        passcodeStore.clear()                lcd.close(clear=True)        lcd.cursor_pos = (0, 0)        lcd.write_string('Passcode: ')                print('Passcode: ')        try:            while True:                # call the readLine function for each row of the keypad                readLinePass(L1, ["F1","F2","#","*"])                readLinePass(L2, ["1","2","3","UP"])                readLinePass(L3, ["4","5","6","DOWN"])                readLinePass(L4, ["7","8","9","ESC"])                readLinePass(L5, ["LEFT","0","RIGHT"])                time.sleep(0.1)         except:            if passcodeStore != ['1','2','3','4']:                print("Incorrect")                lcd.cursor_pos = (1, 0)                lcd.write_string('Incorrect passcode')                lcd.cursor_pos = (3, 0)                lcd.write_string('Button2 for Exam')                continue                            else:                lcd.cursor_pos = (1, 0)                lcd.write_string('Year: ')                print('\nYear: ')                lcd.cursor_pos = (3, 0)                lcd.write_string('Only Year 5 valid')                                try:                    while True:                        # call the readLine function for each row of the keypad                        readLineYear(L3, ["4","5","6","DOWN"])                        readLineYear(L5, ["LEFT","0","RIGHT"])                        time.sleep(0.1)                 except:                    #Assign input to files                    if year != ['5']:                        lcd.cursor_pos = (1, 0)                        lcd.write_string('Invalid Year')                        lcd.cursor_pos = (3, 0)                        lcd.write_string('Button1 for Class')                        continue                                            else:                        lcd.cursor_pos = (2, 0)                        lcd.write_string('Semester (1/2): ')                        lcd.cursor_pos = (3, 0)                        lcd.write_string('                 ')                        print('\nSemester (1/2): ')                                        try:                            while True:                                readLineSem(L2, ["1","2","3","UP"])                                readLineSem(L5, ["LEFT","0","RIGHT"])#,"ENT"])                                time.sleep(0.1)                         except:                            #First sem courses                            if sem == ['1']:                                lcd.close(clear=True)                                lcd.cursor_pos = (0, 0)                                lcd.write_string(' Select Course:')                                print("Select Course")                                                                lcd.cursor_pos = (2, 0)                                lcd.write_string('1_ECE501   2_ECE502')                                lcd.cursor_pos = (3, 0)                                lcd.write_string('3_ECE503   4_ECE504')                                                                try:                                    while True:                                        # call the readLine function for each row of the keypad                                        readLineCourse(L2, ["1","2","3","UP"])                                        readLineCourse(L3, ["4","5","6","DOWN"])                                        readLineCourse(L4, ["7","8","9","ESC"])                                        readLineCourse(L5, ["LEFT","0","RIGHT"])#,"ENT"])                                        time.sleep(0.1)                                 except:                                    #Assign input to files                                    if course == ['1']:                                        course = "ECE501.1" + ".csv"                                        lcd.close(clear=True)                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE501.1')                                        print(course)                                    elif course == ['2']:                                        course = "ECE502.1" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE502.1')                                        print(course)                                    elif course == ['3']:                                        course = "ECE503.1" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE503.1')                                        print(course)                                    elif course == ['4']:                                        course = "ECE504.1" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE504.1')                                        print(course)                                                                    elif sem == ['2']:                                #Second sem courses                                lcd.close(clear=True)                                lcd.cursor_pos = (0, 0)                                lcd.write_string(' Select Course:')                                print("Select Course")                                                                lcd.cursor_pos = (2, 0)                                lcd.write_string('1_ECE505   2_ECE506')                                                     lcd.cursor_pos = (3, 0)                                lcd.write_string('3_ECE507   4_ECE508')                                                                try:                                    while True:                                        # call the readLine function for each row of the keypad                                        readLineCourse(L2, ["1","2","3","UP"])                                        readLineCourse(L3, ["4","5","6","DOWN"])                                        readLineCourse(L4, ["7","8","9","ESC"])                                        readLineCourse(L5, ["LEFT","0","RIGHT"])#,"ENT"])                                        time.sleep(0.1)                                 except:                                    #Assign input to files                                    if course == ['1']:                                        course = "ECE505.2" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE505.2')                                        print(course)                                    elif course == ['2']:                                        course = "ECE506.2" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE506.2')                                        print(course)                                    elif course == ['3']:                                        course = "ECE507.2" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE507.2')                                        print(course)                                    elif course == ['4']:                                        course = "ECE508.2" + ".csv"                                        lcd.cursor_pos = (0, 0)                                        lcd.write_string('  Exam: ECE508.2')                                        print(course)                                                #capture faces with camera        while True:            success, img = cap.read()            imgS = cv2.resize(img,(0,0),None,0.25,0.25)            imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)            facesCurFrame = face_recognition.face_locations(imgS)            encodesCurFrame = face_recognition.face_encodings(imgS,facesCurFrame)            for encodeFace,faceLoc in zip(encodesCurFrame,facesCurFrame):                matches = face_recognition.compare_faces(encodeListKnown,encodeFace)                faceDis = face_recognition.face_distance(encodeListKnown,encodeFace)                matchIndex = np.argmin(faceDis)                if matches[matchIndex]:                    name = classNames[matchIndex].upper()                    newName = name.replace("_", "/")                    y1,x2,y2,x1 = faceLoc                    y1, x2, y2, x1 = y1*4,x2*4,y2*4,x1*4                    cv2.rectangle(img,(x1,y1),(x2,y2),(0,255,0),2)                    cv2.rectangle(img,(x1,y2-35),(x2,y2),(0,255,0),cv2.FILLED)                    cv2.putText(img,newName,(x1+6,y2-6),cv2.FONT_HERSHEY_SIMPLEX,1,(255,255,255),2)                    pathC = 'class'                    with open(f"{pathC}/{course}",'r+') as f:                        myDataList = f.readlines()                        nameList = []                        dateList = []                        for line in myDataList:                            entry = line.split(',')                            nameList.append(entry[0])                            dateList.append(entry[-1])                            most_freq = max(set(nameList))                            print(most_freq)                            print(len(nameList))                            whole = nameList.count(most_freq)                            print(whole)                            part = nameList.count(newName)                            print(part)                                                    if newName in nameList:                            percentage = 100 * int(part)/int(whole)                            print(f'{newName} = {percentage}%\n')                            if percentage >= 75:                                markExam(newName)                                break                            elif percentage < 75:                                print("Unqualified")                                break            cv2.imshow('Output',img)            cv2.waitKey(1)            if (button3.is_pressed):                cap.release()                cv2.destroyAllWindows()                break                                #-------------------------------------------------------------#   #      Update to Google drive             #      Code goes here        